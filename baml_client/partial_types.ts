/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Audio, Image, Pdf, Video } from "@boundaryml/baml"
import type * as types from "./types"
import type {
	ActionButton,
	AutoInsightsResponse,
	BBValues,
	Check,
	Checked,
	Emotions,
	EvidenceSet,
	ExecutiveInsight,
	ExtractedInsight,
	InterviewDoc,
	InterviewExtraction,
	Interviewee,
	InterviewMetadata,
	NoteSnippet,
	OpportunityRecommendation,
	Persona,
	Persona1,
	PersonaAnalysis,
	PersonaSet,
	Set,
	SetRecord,
	Spectrum,
} from "./types"

/******************************************************************************
 *
 *  These types are used for streaming, for when an instance of a type
 *  is still being built up and any of its fields is not yet fully available.
 *
 ******************************************************************************/

export interface StreamState<T> {
	value: T
	state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
	export interface ActionButton {
		label?: string | null
		action_type?: string | null
		parameters?: string | null
		priority?: string | null
	}
	export interface AutoInsightsResponse {
		executive_summary?: string | null
		top_opportunities: OpportunityRecommendation[]
		critical_insights: ExecutiveInsight[]
		persona_analysis: PersonaAnalysis[]
		competitive_considerations: string[]
		immediate_actions: ActionButton[]
		strategic_recommendations: string[]
	}
	export interface EvidenceSet {
		facts: string[]
		goals: string[]
		pains: string[]
		behaviors: string[]
		triggers: string[]
		success: string[]
		quotes: string[]
	}
	export interface ExecutiveInsight {
		title?: string | null
		insight?: string | null
		evidence: string[]
		business_impact?: string | null
		impact_level?: string | null
		confidence_level?: string | null
		personas_affected: string[]
		recommended_actions: ActionButton[]
		category?: string | null
	}
	export interface ExtractedInsight {
		pain?: string | null
		name?: string | null
		details?: string | null
		evidence?: string | null
		desiredOutcome?: string | null
		emotionalResponse?: types.Emotions | null
		underlyingMotivation?: string | null
		values: types.BBValues[]
		category?: string | null
		journeyStage?: string | null
		jtbd?: string | null
		contradictions?: string | null
		relatedTags: string[]
		[key: string]: any
	}
	export interface InterviewDoc {
		source?: string | null
		snippets: NoteSnippet[]
	}
	export interface InterviewExtraction {
		metadata?: InterviewMetadata | null
		interviewee?: Interviewee | null
		insights: ExtractedInsight[]
		observationsAndNotes?: string | null
		highImpactThemes: string[]
		openQuestionsAndNextSteps?: string | null
	}
	export interface InterviewMetadata {
		title?: string | null
		date?: string | null
		interviewer?: string | null
		durationMin?: number | null
	}
	export interface Interviewee {
		name?: string | null
		persona?: string | null
		participantDescription?: string | null
		segment?: string | null
		contactInfo?: string | null
	}
	export interface NoteSnippet {
		tag?: string | null
		text?: string | null
		speaker?: string | null
		timestamp?: string | null
	}
	export interface OpportunityRecommendation {
		title?: string | null
		description?: string | null
		revenue_potential?: string | null
		effort_estimate?: string | null
		target_personas: string[]
		supporting_insights: string[]
		competitive_advantage?: string | null
		recommended_actions: ActionButton[]
	}
	export interface Persona {
		name_and_tagline?: string | null
		role_context?: string | null
		goals: string[]
		behaviors_habits: string[]
		pain_points: string[]
		triggers_decision_drivers: string[]
		success_definition?: string | null
		key_quotes: string[]
		differentiators: string[]
		confidence?: string | null
		evidence_count?: number | null
		hypothesis_notes?: string | null
		key_open_questions: string[]
	}
	export interface Persona1 {
		name?: string | null
		description?: string | null
		age?: string | null
		gender?: string | null
		location?: string | null
		education?: string | null
		occupation?: string | null
		income?: string | null
		languages?: string | null
		segment?: string | null
		role?: string | null
		color_hex?: string | null
		image_url?: string | null
		motivations?: string[] | null
		values?: string[] | null
		frustrations?: string[] | null
		preferences?: string | null
		learning_style?: string | null
		tech_comfort_level?: string | null
		frequency_of_purchase?: string | null
		frequency_of_use?: string | null
		key_tasks?: string[] | null
		tools_used?: string[] | null
		primary_goal?: string | null
		secondary_goals?: string[] | null
		sources?: string[] | null
		quotes?: string[] | null
		percentage?: number | null
	}
	export interface PersonaAnalysis {
		persona_name?: string | null
		key_pain_points: string[]
		unmet_needs: string[]
		revenue_potential?: string | null
		willingness_to_pay?: string | null
		recommended_solutions: string[]
		competitive_threats: string[]
	}
	export interface PersonaSet {
		personas: Persona[]
		version?: string | null
		change_log?: string | null
		contrast_persona?: Persona | null
	}
	export interface Set {
		name?: string | null
		description?: string | null
		members: SetRecord[]
	}
	export interface SetRecord {
		term?: string | null
		definition?: string | null
	}
	export interface Spectrum {
		axis?: string | null
		rationale?: string | null
		supporting_evidence: string[]
		alternatives: string[]
	}
}
