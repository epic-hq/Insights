/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  ActionButton,  Anchor,  AutoGroupThemesResponse,  AutoInsightsResponse,  BBValues,  BatchEvaluationResult,  Category,  Chapter,  ContextualSuggestions,  DecisionQuestionAnswer,  DecisionQuestionItem,  DecisionQuestionOut,  Emotions,  EvidenceAnalysisResponse,  EvidenceExtraction,  EvidenceItem,  EvidenceLinkProposal,  EvidenceLinkResult,  EvidenceParticipant,  EvidenceQuestionLink,  EvidenceSet,  EvidenceTurn,  EvidenceUnit,  ExecutiveInsight,  ExecutiveSummary,  ExtractedInsight,  Extraction,  FacetCandidatePayload,  FacetCatalog,  FacetCatalogEntry,  FacetCatalogKind,  FacetMention,  FollowUpQuestion,  FollowUpQuestionScores,  FollowUpSet,  GapAnalysis,  GenerateInputs,  HistoryItem,  InsightMatch,  InterviewDoc,  InterviewExtraction,  InterviewMetadata,  InterviewPromptItem,  InterviewPromptOut,  Interviewee,  KindTags,  NoteSnippet,  OpportunityRecommendation,  Person,  PersonFacetObservation,  PersonScaleObservation,  Persona,  Persona1,  PersonaAnalysis,  PersonaAssignmentDecision,  PersonaExtraction,  PersonaFacet,  PersonaSet,  ProjectAnalysis,  ProjectNameDescription,  ProjectTemplateOut,  Question,  QuestionAnalysisSummary,  QuestionContext,  QuestionEvaluation,  QuestionImprovement,  QuestionIssue,  QuestionPolicy,  QuestionSet,  ResearchGoal,  ResearchPlanOut,  ResearchQuestion,  ResearchQuestionAnswer,  ResearchQuestionItem,  ResearchQuestionOut,  ResearchQuestionSuggestions,  ResearchStructure,  Scene,  Scores,  Set,  SetRecord,  Source,  Spectrum,  SuggestedQuestion,  ThemeCandidate,  TurnAnchors } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
  value: T
  state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    export interface ActionButton {
      label?: string | null
      action_type?: string | null
      parameters?: string | null
      priority?: string | null
    }
    export interface Anchor {
      type?: string | null
      target?: string | null
      start?: string | null
      end?: string | null
      speaker?: string | null
      chapter_title?: string | null
    }
    export interface AutoGroupThemesResponse {
      themes: ThemeCandidate[]
    }
    export interface AutoInsightsResponse {
      executive_summary?: string | null
      top_opportunities: OpportunityRecommendation[]
      critical_insights: ExecutiveInsight[]
      persona_analysis: PersonaAnalysis[]
      competitive_considerations: string[]
      immediate_actions: ActionButton[]
      strategic_recommendations: string[]
    }
    export interface BatchEvaluationResult {
      evaluations: QuestionEvaluation[]
      overall_summary?: string | null
      top_priorities: string[]
    }
    export interface Category {
      id?: string | null
      label?: string | null
      weight?: number | null
    }
    export interface Chapter {
      start_ms?: number | null
      end_ms?: number | null
      summary?: string | null
      title?: string | null
    }
    export interface ContextualSuggestions {
      decision_questions: string[]
      assumptions: string[]
      unknowns: string[]
      organizations: string[]
      roles: string[]
      interview_questions: string[]
    }
    export interface DecisionQuestionAnswer {
      decision_question_id?: string | null
      strategic_insight?: string | null
      supporting_findings: string[]
      research_question_ids: string[]
      confidence?: number | null
      reasoning?: string | null
      recommended_actions: string[]
    }
    export interface DecisionQuestionItem {
      id?: string | null
      text?: string | null
      rationale?: string | null
    }
    export interface DecisionQuestionOut {
      id?: string | null
      text?: string | null
      rationale?: string | null
      key_metrics: string[]
      risks_if_wrong: string[]
    }
    export interface EvidenceAnalysisResponse {
      evidence_results: EvidenceLinkResult[]
      research_question_answers: ResearchQuestionAnswer[]
      decision_question_answers: DecisionQuestionAnswer[]
      global_goal_summary?: string | null
      recommended_actions: string[]
    }
    export interface EvidenceExtraction {
      people: EvidenceParticipant[]
      evidence: EvidenceUnit[]
      facet_catalog_version?: string | null
    }
    export interface EvidenceItem {
      id?: string | null
      verbatim?: string | null
      support?: "supports" | "refutes" | "neutral" | null
      interview_id?: string | null
      context_summary?: string | null
    }
    export interface EvidenceLinkProposal {
      evidence_id?: string | null
      rationale?: string | null
      confidence?: number | null
    }
    export interface EvidenceLinkResult {
      evidence_id?: string | null
      links: EvidenceQuestionLink[]
    }
    export interface EvidenceParticipant {
      person_key?: string | null
      display_name?: string | null
      inferred_name?: string | null
      role?: string | null
      personas?: string[] | null
      segments?: string[] | null
      organization?: string | null
      summary?: string | null
      notes?: string | null
      facets?: PersonFacetObservation[] | null
      scales?: PersonScaleObservation[] | null
    }
    export interface EvidenceQuestionLink {
      question_id?: string | null
      question_kind?: "decision" | "research" | null
      decision_question_id?: string | null
      relationship?: "supports" | "refutes" | "neutral" | null
      confidence?: number | null
      answer_summary?: string | null
      rationale?: string | null
      next_steps?: string | null
    }
    export interface EvidenceSet {
      facts: string[]
      goals: string[]
      pains: string[]
      behaviors: string[]
      triggers: string[]
      success: string[]
      quotes: string[]
    }
    export interface EvidenceTurn {
      index?: number | null
      person_key?: string | null
      gist?: string | null
      chunk?: string | null
      verbatim?: string | null
      anchors?: TurnAnchors | null
      confidence?: string | null
      why_it_matters?: string | null
      facet_mentions: FacetMention[]
      says?: string[] | null
      does?: string[] | null
      thinks?: string[] | null
      feels?: string[] | null
      pains?: string[] | null
      gains?: string[] | null
    }
    export interface EvidenceUnit {
      person_key?: string | null
      person_role?: string | null
      topic?: string | null
      gist?: string | null
      chunk?: string | null
      verbatim?: string | null
      support?: string | null
      kind_tags?: KindTags | null
      personas?: string[] | null
      segments?: string[] | null
      journey_stage?: string | null
      anchors: Anchor[]
      confidence?: string | null
      context_summary?: string | null
      independence_key?: string | null
      says?: string[] | null
      does?: string[] | null
      thinks?: string[] | null
      feels?: string[] | null
      pains?: string[] | null
      gains?: string[] | null
    }
    export interface ExecutiveInsight {
      title?: string | null
      insight?: string | null
      evidence: string[]
      business_impact?: string | null
      impact_level?: string | null
      confidence_level?: string | null
      personas_affected: string[]
      recommended_actions: ActionButton[]
      category?: string | null
    }
    export interface ExecutiveSummary {
      answered_insights: string[]
      critical_unknowns: string[]
      completion_percentage?: number | null
      confidence?: number | null
      next_action?: string | null
    }
    export interface ExtractedInsight {
      name?: string | null
      pain?: string | null
      details?: string | null
      evidence?: string | null
      desiredOutcome?: string | null
      assumptionAlignment?: string | null
      researchQuestionAnswered?: string | null
      evidenceStrength?: string | null
      productImplication?: string | null
      followUpQuestions?: string | null
      emotionalResponse?: types.Emotions | null
      underlyingMotivation?: string | null
      values: types.BBValues[]
      category?: string | null
      journeyStage?: string | null
      jtbd?: string | null
      contradictions?: string | null
      relatedTags: string[]
      [key: string]: any;
    }
    export interface Extraction {
      people: Person[]
      evidence: EvidenceTurn[]
      facet_mentions: FacetMention[]
      scenes: Scene[]
    }
    export interface FacetCandidatePayload {
      kind_slug?: string | null
      label?: string | null
      synonyms?: string[] | null
      notes?: string[] | null
    }
    export interface FacetCatalog {
      kinds: FacetCatalogKind[]
      facets: FacetCatalogEntry[]
      version?: string | null
    }
    export interface FacetCatalogEntry {
      facet_ref?: string | null
      kind_slug?: string | null
      label?: string | null
      alias?: string | null
      synonyms?: string[] | null
    }
    export interface FacetCatalogKind {
      slug?: string | null
      label?: string | null
    }
    export interface FacetMention {
      index?: number | null
      parent_index?: number | null
      person_key?: string | null
      kind_slug?: string | null
      value?: string | null
      quote?: string | null
      confidence?: number | null
    }
    export interface FollowUpQuestion {
      id?: string | null
      text?: string | null
      rationale?: string | null
      estimatedMinutes?: number | null
      categoryId?: string | null
      scores?: FollowUpQuestionScores | null
    }
    export interface FollowUpQuestionScores {
      importance?: number | null
      goalMatch?: number | null
      novelty?: number | null
    }
    export interface FollowUpSet {
      originalQuestion?: string | null
      followUps: FollowUpQuestion[]
    }
    export interface GapAnalysis {
      unanswered_questions: string[]
      partially_answered_questions: string[]
      follow_up_recommendations: string[]
      suggested_interview_topics: string[]
    }
    export interface GenerateInputs {
      target_org?: string | null
      target_roles?: string | null
      research_goal?: string | null
      research_goal_details?: string | null
      assumptions?: string | null
      unknowns?: string | null
      custom_instructions?: string | null
      research_mode?: string | null
      session_id?: string | null
      round?: number | null
      total_per_round?: number | null
      per_category_min?: number | null
      per_category_max?: number | null
      interview_time_limit?: number | null
    }
    export interface HistoryItem {
      questionId?: string | null
      action?: "shown" | "rejected" | "asked" | "answered" | null
      ts?: string | null
      interviewId?: string | null
    }
    export interface InsightMatch {
      question?: string | null
      insights_found: string[]
      confidence?: number | null
      answer_summary?: string | null
      evidence: string[]
    }
    export interface InterviewDoc {
      source?: string | null
      snippets: NoteSnippet[]
    }
    export interface InterviewExtraction {
      metadata?: InterviewMetadata | null
      interviewee?: Interviewee | null
      insights: ExtractedInsight[]
      relevantAnswers: string[]
      observationsAndNotes?: string | null
      highImpactThemes: string[]
      openQuestionsAndNextSteps?: string | null
    }
    export interface InterviewMetadata {
      title?: string | null
      date?: string | null
      interviewer?: string | null
      durationMin?: number | null
    }
    export interface InterviewPromptItem {
      id?: string | null
      text?: string | null
      research_question_id?: string | null
    }
    export interface InterviewPromptOut {
      id?: string | null
      rq_ids: string[]
      text?: string | null
      followups: string[]
      bias_checks: string[]
    }
    export interface Interviewee {
      name?: string | null
      persona?: string | null
      participantDescription?: string | null
      segment?: string | null
      contactInfo?: string | null
    }
    export interface KindTags {
      problem?: string[] | null
      goal?: string[] | null
      behavior?: string[] | null
      emotion?: types.Emotions | null
      context?: string[] | null
      artifact?: string[] | null
    }
    export interface NoteSnippet {
      tag?: string | null
      text?: string | null
      speaker?: string | null
      timestamp?: string | null
    }
    export interface OpportunityRecommendation {
      title?: string | null
      description?: string | null
      revenue_potential?: string | null
      effort_estimate?: string | null
      target_personas: string[]
      supporting_insights: string[]
      competitive_advantage?: string | null
      recommended_actions: ActionButton[]
    }
    export interface Person {
      id?: string | null
      display_name?: string | null
      inferred_name?: string | null
      role?: string | null
    }
    export interface PersonFacetObservation {
      facet_ref?: string | null
      candidate?: FacetCandidatePayload | null
      kind_slug?: string | null
      value?: string | null
      source?: string | null
      evidence_unit_index?: number | null
      confidence?: number | null
      notes?: string[] | null
    }
    export interface PersonScaleObservation {
      kind_slug?: string | null
      score?: number | null
      band?: string | null
      source?: string | null
      evidence_unit_index?: number | null
      confidence?: number | null
      rationale?: string | null
    }
    export interface Persona {
      name?: string | null
      name_and_tagline?: string | null
      description?: string | null
      role_context?: string | null
      age?: string | null
      gender?: string | null
      location?: string | null
      education?: string | null
      occupation?: string | null
      income?: string | null
      languages?: string | null
      segment?: string | null
      role?: string | null
      color_hex?: string | null
      image_url?: string | null
      percentage?: number | null
      goals: string[]
      primary_goal?: string | null
      secondary_goals?: string[] | null
      motivations?: string[] | null
      values?: string[] | null
      success_definition?: string | null
      behaviors_habits: string[]
      key_tasks?: string[] | null
      tools_used?: string[] | null
      frequency_of_purchase?: string | null
      frequency_of_use?: string | null
      triggers_decision_drivers: string[]
      pain_points: string[]
      frustrations?: string[] | null
      preferences?: string | null
      learning_style?: string | null
      tech_comfort_level?: string | null
      key_quotes: string[]
      sources?: string[] | null
      differentiators: string[]
      confidence?: string | null
      evidence_count?: number | null
      hypothesis_notes?: string | null
      key_open_questions: string[]
    }
    export interface Persona1 {
      name?: string | null
      description?: string | null
      age?: string | null
      gender?: string | null
      location?: string | null
      education?: string | null
      occupation?: string | null
      income?: string | null
      languages?: string | null
      segment?: string | null
      role?: string | null
      color_hex?: string | null
      image_url?: string | null
      motivations?: string[] | null
      values?: string[] | null
      frustrations?: string[] | null
      preferences?: string | null
      learning_style?: string | null
      tech_comfort_level?: string | null
      frequency_of_purchase?: string | null
      frequency_of_use?: string | null
      key_tasks?: string[] | null
      tools_used?: string[] | null
      primary_goal?: string | null
      secondary_goals?: string[] | null
      sources?: string[] | null
      quotes?: string[] | null
      percentage?: number | null
    }
    export interface PersonaAnalysis {
      persona_name?: string | null
      key_pain_points: string[]
      unmet_needs: string[]
      revenue_potential?: string | null
      willingness_to_pay?: string | null
      recommended_solutions: string[]
      competitive_threats: string[]
    }
    export interface PersonaAssignmentDecision {
      action?: string | null
      persona_id?: string | null
      persona_name?: string | null
      confidence_score?: number | null
      reasoning?: string | null
      new_persona_data?: Persona | null
    }
    export interface PersonaExtraction {
      persona_facets: PersonaFacet[]
      summary?: string | null
    }
    export interface PersonaFacet {
      person_key?: string | null
      kind_slug?: string | null
      value?: string | null
      evidence_refs: number[]
      confidence?: number | null
      frequency?: number | null
      reasoning?: string | null
    }
    export interface PersonaSet {
      personas: Persona[]
      version?: string | null
      change_log?: string | null
      contrast_persona?: Persona | null
    }
    export interface ProjectAnalysis {
      research_goal?: ResearchGoal | null
      question_answers: InsightMatch[]
      gap_analysis?: GapAnalysis | null
      key_discoveries: string[]
      confidence_score?: number | null
      next_steps: string[]
    }
    export interface ProjectNameDescription {
      name?: string | null
      description?: string | null
    }
    export interface ProjectTemplateOut {
      template_key?: string | null
      target_orgs: string[]
      target_roles: string[]
      research_goal?: string | null
      research_goal_details?: string | null
      decision_questions: string[]
      assumptions: string[]
      unknowns: string[]
      custom_instructions?: string | null
    }
    export interface Question {
      id?: string | null
      text?: string | null
      categoryId?: string | null
      rationale?: string | null
      tags?: string[] | null
      scores?: Scores | null
      estimatedMinutes?: number | null
      status?: "proposed" | "shown" | "rejected" | "asked" | "answered" | null
      source?: "llm" | "curated" | "custom" | null
      displayOrder?: number | null
      externalRef?: string | null
    }
    export interface QuestionAnalysisSummary {
      question_id?: string | null
      question_kind?: "decision" | "research" | null
      decision_question_id?: string | null
      confidence?: number | null
      summary?: string | null
      goal_achievement_summary?: string | null
      next_steps?: string | null
    }
    export interface QuestionContext {
      id?: string | null
      kind?: "decision" | "research" | null
      decision_question_id?: string | null
      text?: string | null
      rationale?: string | null
    }
    export interface QuestionEvaluation {
      overall_quality?: "green" | "yellow" | "red" | null
      score?: number | null
      strengths: string[]
      issues: QuestionIssue[]
      improvement?: QuestionImprovement | null
      recommendation?: "proceed" | "revise" | null
      quick_feedback?: string | null
    }
    export interface QuestionImprovement {
      original_question?: string | null
      suggested_rewrite?: string | null
      explanation?: string | null
    }
    export interface QuestionIssue {
      type?: "leading" | "closed_ended" | "too_vague" | "compound" | "biased" | "jargon" | "assume_knowledge" | null
      description?: string | null
      severity?: "high" | "medium" | "low" | null
    }
    export interface QuestionPolicy {
      totalPerRound?: number | null
      perCategoryMin?: number | null
      perCategoryMax?: number | null
      dedupeWindowRounds?: number | null
      balanceBy?: string[] | null
    }
    export interface QuestionSet {
      sessionId?: string | null
      policy?: QuestionPolicy | null
      categories: Category[]
      questions: Question[]
      history: HistoryItem[]
      round?: number | null
    }
    export interface ResearchGoal {
      goal?: string | null
      icp?: string | null
      role?: string | null
      questions: ResearchQuestion[]
    }
    export interface ResearchPlanOut {
      goal?: string | null
      decision_questions: DecisionQuestionOut[]
      research_questions: ResearchQuestionOut[]
      interview_prompts: InterviewPromptOut[]
      other_data_sources: string[]
    }
    export interface ResearchQuestion {
      question?: string | null
      priority?: number | null
    }
    export interface ResearchQuestionAnswer {
      research_question_id?: string | null
      findings: string[]
      evidence_ids: string[]
      confidence?: number | null
      reasoning?: string | null
    }
    export interface ResearchQuestionItem {
      id?: string | null
      text?: string | null
      rationale?: string | null
      decision_question_id?: string | null
    }
    export interface ResearchQuestionOut {
      id?: string | null
      dq_id?: string | null
      text?: string | null
      rationale?: string | null
      evidence_types: string[]
      suggested_methods: string[]
    }
    export interface ResearchQuestionSuggestions {
      core_questions: SuggestedQuestion[]
      behavioral_questions: SuggestedQuestion[]
      pain_point_questions: SuggestedQuestion[]
      solution_questions: SuggestedQuestion[]
      context_questions: SuggestedQuestion[]
    }
    export interface ResearchStructure {
      decision_questions: DecisionQuestionItem[]
      research_questions: ResearchQuestionItem[]
      interview_prompts: InterviewPromptItem[]
    }
    export interface Scene {
      scene_id?: string | null
      start_index?: number | null
      end_index?: number | null
      topic?: string | null
      summary?: string | null
    }
    export interface Scores {
      goalMatch?: number | null
      novelty?: number | null
      importance?: number | null
      uncertainty?: number | null
    }
    export interface Set {
      name?: string | null
      description?: string | null
      members: SetRecord[]
    }
    export interface SetRecord {
      term?: string | null
      definition?: string | null
    }
    export interface Source {
    }
    export interface Spectrum {
      axis?: string | null
      rationale?: string | null
      supporting_evidence: string[]
      alternatives: string[]
    }
    export interface SuggestedQuestion {
      question?: string | null
      rationale?: string | null
      interview_type?: "user_interview" | "stakeholder_interview" | "expert_interview" | null
      priority?: number | null
    }
    export interface ThemeCandidate {
      name?: string | null
      statement?: string | null
      inclusion_criteria?: string | null
      exclusion_criteria?: string | null
      synonyms?: string[] | null
      anti_examples?: string[] | null
      links: EvidenceLinkProposal[]
    }
    export interface TurnAnchors {
      start_ms?: number | null
      end_ms?: number | null
      speaker_label?: string | null
      chapter_title?: string | null
      char_span?: number[] | null
    }
}