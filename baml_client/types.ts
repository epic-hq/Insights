/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export enum BBValues {
  Accountability = "Accountability",
  Achievement = "Achievement",
  Adaptability = "Adaptability",
  Adventure = "Adventure",
  Altruism = "Altruism",
  Ambition = "Ambition",
  Authenticity = "Authenticity",
  Balance = "Balance",
  Beauty = "Beauty",
  Being_the_best = "Being_the_best",
  Belonging = "Belonging",
  Career = "Career",
  Caring = "Caring",
  Collaboration = "Collaboration",
  Commitment = "Commitment",
  Community = "Community",
  Compassion = "Compassion",
  Competence = "Competence",
  Confidence = "Confidence",
  Connection = "Connection",
  Contentment = "Contentment",
  Contribution = "Contribution",
  Cooperation = "Cooperation",
  Courage = "Courage",
  Creativity = "Creativity",
  Curiosity = "Curiosity",
  Dignity = "Dignity",
  Diversity = "Diversity",
  Environment = "Environment",
  Efficiency = "Efficiency",
  Equality = "Equality",
  Ethics = "Ethics",
  Excellence = "Excellence",
  Fairness = "Fairness",
  Faith = "Faith",
  Family = "Family",
  Financial_stability = "Financial_stability",
  Forgiveness = "Forgiveness",
  Freedom = "Freedom",
  Friendship = "Friendship",
  Fun = "Fun",
  Future_generations = "Future_generations",
  Generosity = "Generosity",
  Giving_back = "Giving_back",
  Grace = "Grace",
  Gratitude = "Gratitude",
  Growth = "Growth",
  Harmony = "Harmony",
  Health = "Health",
  Home = "Home",
  Honesty = "Honesty",
  Hope = "Hope",
  Humility = "Humility",
  Humor = "Humor",
  Inclusion = "Inclusion",
  Independence = "Independence",
  Initiative = "Initiative",
  Integrity = "Integrity",
  Intuition = "Intuition",
  Job_security = "Job_security",
  Joy = "Joy",
  Justice = "Justice",
  Kindness = "Kindness",
  Knowledge = "Knowledge",
  Leadership = "Leadership",
  Learning = "Learning",
  Legacy = "Legacy",
  Leisure = "Leisure",
  Love = "Love",
  Loyalty = "Loyalty",
  Making_a_difference = "Making_a_difference",
  Nature = "Nature",
  Openness = "Openness",
  Optimism = "Optimism",
  Order = "Order",
  Parenting = "Parenting",
  Patience = "Patience",
  Patriotism = "Patriotism",
  Peace = "Peace",
  Perseverance = "Perseverance",
  Personal_fulfillment = "Personal_fulfillment",
  Power = "Power",
  Pride = "Pride",
  Recognition = "Recognition",
  Reliability = "Reliability",
  Resourcefulness = "Resourcefulness",
  Respect = "Respect",
  Responsibility = "Responsibility",
  Risk_taking = "Risk_taking",
  Safety = "Safety",
  Security = "Security",
  Self_discipline = "Self_discipline",
  Self_expression = "Self_expression",
  Self_respect = "Self_respect",
  Serenity = "Serenity",
  Service = "Service",
  Simplicity = "Simplicity",
  Spirituality = "Spirituality",
  Sportsmanship = "Sportsmanship",
  Stewardship = "Stewardship",
  Success = "Success",
  Teamwork = "Teamwork",
  Thrift = "Thrift",
  Time = "Time",
  Tradition = "Tradition",
  Travel = "Travel",
  Trust = "Trust",
  Truth = "Truth",
  Understanding = "Understanding",
  Uniqueness = "Uniqueness",
  Usefulness = "Usefulness",
  Vision = "Vision",
  Vulnerability = "Vulnerability",
  Wealth = "Wealth",
  Well_being = "Well_being",
  Wholeheartedness = "Wholeheartedness",
  Wisdom = "Wisdom",
}

export enum Emotions {
  Abandoned = "Abandoned",
  Accepted = "Accepted",
  Aggressive = "Aggressive",
  Amazed = "Amazed",
  Angry = "Angry",
  Annoyed = "Annoyed",
  Anxious = "Anxious",
  Apathetic = "Apathetic",
  Appalled = "Appalled",
  Aroused = "Aroused",
  Ashamed = "Ashamed",
  Astonished = "Astonished",
  Awe = "Awe",
  Awful = "Awful",
  Bad = "Bad",
  Betrayed = "Betrayed",
  Bitter = "Bitter",
  Bored = "Bored",
  Busy = "Busy",
  Cheeky = "Cheeky",
  Confident = "Confident",
  Confused = "Confused",
  Content = "Content",
  Courageous = "Courageous",
  Creative = "Creative",
  Critical = "Critical",
  Curious = "Curious",
  Depressed = "Depressed",
  Despair = "Despair",
  Detestable = "Detestable",
  Disappointed = "Disappointed",
  Disapproving = "Disapproving",
  Disgusted = "Disgusted",
  Disillusioned = "Disillusioned",
  Dismayed = "Dismayed",
  Dismissive = "Dismissive",
  Disrespected = "Disrespected",
  Distant = "Distant",
  Eager = "Eager",
  Embarrassed = "Embarrassed",
  Empty = "Empty",
  Energetic = "Energetic",
  Excited = "Excited",
  Excluded = "Excluded",
  Exposed = "Exposed",
  Fearful = "Fearful",
  Fragile = "Fragile",
  Free = "Free",
  Frightened = "Frightened",
  Frustrated = "Frustrated",
  Furious = "Furious",
  Grief = "Grief",
  Guilty = "Guilty",
  Happy = "Happy",
  Helpless = "Helpless",
  Hesitant = "Hesitant",
  Hopeful = "Hopeful",
  Horrified = "Horrified",
  Hostile = "Hostile",
  Humiliated = "Humiliated",
  Hurt = "Hurt",
  Inadequate = "Inadequate",
  Indifferent = "Indifferent",
  Indignant = "Indignant",
  Inferior = "Inferior",
  Infuriated = "Infuriated",
  Inquisitive = "Inquisitive",
  Insecure = "Insecure",
  Insignificant = "Insignificant",
  Inspired = "Inspired",
  Interested = "Interested",
  Intimate = "Intimate",
  Isolated = "Isolated",
  Jealous = "Jealous",
  Joyful = "Joyful",
  Judgmental = "Judgmental",
  Let_down = "Let_down",
  Lonely = "Lonely",
  Loving = "Loving",
  Mad = "Mad",
  Nauseated = "Nauseated",
  Nervous = "Nervous",
  Numb = "Numb",
  Optimistic = "Optimistic",
  Out_of_control = "Out_of_control",
  Overwhelmed = "Overwhelmed",
  Peaceful = "Peaceful",
  Perplexed = "Perplexed",
  Persecuted = "Persecuted",
  Playful = "Playful",
  Powerful = "Powerful",
  Powerless = "Powerless",
  Pressured = "Pressured",
  Proud = "Proud",
  Provoked = "Provoked",
  Rejected = "Rejected",
  Remorseful = "Remorseful",
  Repelled = "Repelled",
  Resentful = "Resentful",
  Respected = "Respected",
  Revolted = "Revolted",
  Ridiculed = "Ridiculed",
  Rushed = "Rushed",
  Sad = "Sad",
  Scared = "Scared",
  Sensitive = "Sensitive",
  Shocked = "Shocked",
  Skeptical = "Skeptical",
  Sleepy = "Sleepy",
  Startled = "Startled",
  Stressed = "Stressed",
  Successful = "Successful",
  Surprised = "Surprised",
  Thankful = "Thankful",
  Threatened = "Threatened",
  Tired = "Tired",
  Trusting = "Trusting",
  Unfocussed = "Unfocussed",
  Valued = "Valued",
  Victimized = "Victimized",
  Violated = "Violated",
  Vulnerable = "Vulnerable",
  Weak = "Weak",
  Withdrawn = "Withdrawn",
  Worried = "Worried",
  Worthless = "Worthless",
}

export interface ActionButton {
  label: string
  action_type: string
  parameters: string
  priority: string
  
}

export interface AutoInsightsResponse {
  executive_summary: string
  top_opportunities: OpportunityRecommendation[]
  critical_insights: ExecutiveInsight[]
  persona_analysis: PersonaAnalysis[]
  competitive_considerations: string[]
  immediate_actions: ActionButton[]
  strategic_recommendations: string[]
  
}

export interface EvidenceSet {
  facts: string[]
  goals: string[]
  pains: string[]
  behaviors: string[]
  triggers: string[]
  success: string[]
  quotes: string[]
  
}

export interface ExecutiveInsight {
  title: string
  insight: string
  evidence: string[]
  business_impact: string
  impact_level: string
  confidence_level: string
  personas_affected: string[]
  recommended_actions: ActionButton[]
  category: string
  
}

export interface ExecutiveSummary {
  answered_insights: string[]
  critical_unknowns: string[]
  completion_percentage: number
  confidence: number
  next_action: string
  
}

export interface ExtractedInsight {
  pain?: string | null
  name: string
  details?: string | null
  evidence?: string | null
  desiredOutcome?: string | null
  emotionalResponse: Emotions
  underlyingMotivation?: string | null
  values: BBValues[]
  category: string
  journeyStage: string
  jtbd?: string | null
  contradictions?: string | null
  relatedTags: string[]
  
  [key: string]: any;
}

export interface GapAnalysis {
  unanswered_questions: string[]
  partially_answered_questions: string[]
  follow_up_recommendations: string[]
  suggested_interview_topics: string[]
  
}

export interface InsightMatch {
  question: string
  insights_found: string[]
  confidence: number
  answer_summary: string
  evidence: string[]
  
}

export interface InterviewDoc {
  source: string
  snippets: NoteSnippet[]
  
}

export interface InterviewExtraction {
  metadata: InterviewMetadata
  interviewee: Interviewee
  insights: ExtractedInsight[]
  observationsAndNotes: string
  highImpactThemes: string[]
  openQuestionsAndNextSteps: string
  
}

export interface InterviewMetadata {
  title: string
  date?: string | null
  interviewer?: string | null
  durationMin?: number | null
  
}

export interface Interviewee {
  name?: string | null
  persona?: string | null
  participantDescription?: string | null
  segment?: string | null
  contactInfo?: string | null
  
}

export interface NoteSnippet {
  tag: string
  text: string
  speaker?: string | null
  timestamp?: string | null
  
}

export interface OpportunityRecommendation {
  title: string
  description: string
  revenue_potential: string
  effort_estimate: string
  target_personas: string[]
  supporting_insights: string[]
  competitive_advantage: string
  recommended_actions: ActionButton[]
  
}

export interface Persona {
  name: string
  name_and_tagline: string
  description?: string | null
  role_context: string
  age?: string | null
  gender?: string | null
  location?: string | null
  education?: string | null
  occupation?: string | null
  income?: string | null
  languages?: string | null
  segment?: string | null
  role?: string | null
  color_hex?: string | null
  image_url?: string | null
  percentage?: number | null
  goals: string[]
  primary_goal?: string | null
  secondary_goals?: string[] | null
  motivations?: string[] | null
  values?: string[] | null
  success_definition: string
  behaviors_habits: string[]
  key_tasks?: string[] | null
  tools_used?: string[] | null
  frequency_of_purchase?: string | null
  frequency_of_use?: string | null
  triggers_decision_drivers: string[]
  pain_points: string[]
  frustrations?: string[] | null
  preferences?: string | null
  learning_style?: string | null
  tech_comfort_level?: string | null
  key_quotes: string[]
  sources?: string[] | null
  differentiators: string[]
  confidence: string
  evidence_count: number
  hypothesis_notes: string
  key_open_questions: string[]
  
}

export interface Persona1 {
  name: string
  description?: string | null
  age?: string | null
  gender?: string | null
  location?: string | null
  education?: string | null
  occupation?: string | null
  income?: string | null
  languages?: string | null
  segment?: string | null
  role?: string | null
  color_hex?: string | null
  image_url?: string | null
  motivations?: string[] | null
  values?: string[] | null
  frustrations?: string[] | null
  preferences?: string | null
  learning_style?: string | null
  tech_comfort_level?: string | null
  frequency_of_purchase?: string | null
  frequency_of_use?: string | null
  key_tasks?: string[] | null
  tools_used?: string[] | null
  primary_goal?: string | null
  secondary_goals?: string[] | null
  sources?: string[] | null
  quotes?: string[] | null
  percentage?: number | null
  
}

export interface PersonaAnalysis {
  persona_name: string
  key_pain_points: string[]
  unmet_needs: string[]
  revenue_potential: string
  willingness_to_pay: string
  recommended_solutions: string[]
  competitive_threats: string[]
  
}

export interface PersonaAssignmentDecision {
  action: string
  persona_id?: string | null
  persona_name?: string | null
  confidence_score: number
  reasoning: string
  new_persona_data?: Persona | null
  
}

export interface PersonaSet {
  personas: Persona[]
  version: string
  change_log: string
  contrast_persona?: Persona | null
  
}

export interface ProjectAnalysis {
  research_goal: ResearchGoal
  question_answers: InsightMatch[]
  gap_analysis: GapAnalysis
  key_discoveries: string[]
  confidence_score: number
  next_steps: string[]
  
}

export interface ResearchGoal {
  goal: string
  icp: string
  role: string
  questions: ResearchQuestion[]
  
}

export interface ResearchQuestion {
  question: string
  priority: number
  
}

export interface ResearchQuestionSuggestions {
  core_questions: SuggestedQuestion[]
  behavioral_questions: SuggestedQuestion[]
  pain_point_questions: SuggestedQuestion[]
  solution_questions: SuggestedQuestion[]
  context_questions: SuggestedQuestion[]
  
}

export interface Set {
  name: string
  description: string
  members: SetRecord[]
  
}

export interface SetRecord {
  term: string
  definition: string
  
}

export interface Spectrum {
  axis: string
  rationale: string
  supporting_evidence: string[]
  alternatives: string[]
  
}

export interface SuggestedQuestion {
  question: string
  rationale: string
  interview_type: "user_interview" | "stakeholder_interview" | "expert_interview"
  priority: number
  
}
