/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T, CheckName extends string = string> {
	value: T
	checks: Record<CheckName, Check>
}

export interface Check {
	name: string
	expr: string
	status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
	return get_checks(checks).every((check) => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
	return Object.values(checks)
}
export interface ExtractedInsight {
	name: string
	category: string
	journeyStage: string
	impact?: number | null
	novelty?: number | null
	jtbd?: string | null
	details?: string | null
	underlyingMotivation?: string | null
	pain?: string | null
	desiredOutcome?: string | null
	evidence?: string | null
	emotionalResponse?: string | null
	opportunityIdeas?: string[] | null
	confidence?: number | null
	createdAt?: string | null
	relatedTags: string[]
	contradictions?: string | null
}

export interface InterviewExtraction {
	metadata: InterviewMetadata
	interviewee: Interviewee
	highImpactThemes: string[]
	insights: ExtractedInsight[]
	openQuestionsAndNextSteps: string
	observationsAndNotes: string
}

export interface InterviewMetadata {
	title: string
	date?: string | null
	interviewer: string
}

export interface Interviewee {
	name: string
	persona: string
	participantDescription: string
	segment: string
}
