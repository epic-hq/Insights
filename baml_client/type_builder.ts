/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    ExtractedInsight: ClassBuilder<'ExtractedInsight', "name" | "details" | "pain" | "desiredOutcome" | "evidence" | "emotionalResponse" | "underlyingMotivation" | "category" | "journeyStage" | "impact" | "novelty" | "jtbd" | "confidence" | "contradictions" | "relatedTags" | "createdAt">;
    
    InterviewExtraction: ClassViewer<'InterviewExtraction', "metadata" | "interviewee" | "insights" | "observationsAndNotes" | "highImpactThemes" | "openQuestionsAndNextSteps">;
    
    InterviewMetadata: ClassViewer<'InterviewMetadata', "title" | "date" | "interviewer" | "durationMin">;
    
    Interviewee: ClassViewer<'Interviewee', "name" | "persona" | "participantDescription" | "segment" | "contactInfo">;
    
    Set: ClassViewer<'Set', "name" | "description" | "members">;
    
    SetRecord: ClassViewer<'SetRecord', "term" | "definition">;
    
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "ExtractedInsight","InterviewExtraction","InterviewMetadata","Interviewee","Set","SetRecord",
          ]),
          enums: new Set([
            
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.ExtractedInsight = this.tb.classBuilder("ExtractedInsight", [
          "name","details","pain","desiredOutcome","evidence","emotionalResponse","underlyingMotivation","category","journeyStage","impact","novelty","jtbd","confidence","contradictions","relatedTags","createdAt",
        ]);
        
        this.InterviewExtraction = this.tb.classViewer("InterviewExtraction", [
          "metadata","interviewee","insights","observationsAndNotes","highImpactThemes","openQuestionsAndNextSteps",
        ]);
        
        this.InterviewMetadata = this.tb.classViewer("InterviewMetadata", [
          "title","date","interviewer","durationMin",
        ]);
        
        this.Interviewee = this.tb.classViewer("Interviewee", [
          "name","persona","participantDescription","segment","contactInfo",
        ]);
        
        this.Set = this.tb.classViewer("Set", [
          "name","description","members",
        ]);
        
        this.SetRecord = this.tb.classViewer("SetRecord", [
          "term","definition",
        ]);
        
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}