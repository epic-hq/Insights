/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export { FieldType, EnumBuilder, ClassBuilder }

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    ActionButton: ClassViewer<'ActionButton', "label" | "action_type" | "parameters" | "priority">;
    
    Anchor: ClassViewer<'Anchor', "type" | "target" | "start" | "end" | "speaker" | "chapter_title">;
    
    AutoGroupThemesResponse: ClassViewer<'AutoGroupThemesResponse', "themes">;
    
    AutoInsightsResponse: ClassViewer<'AutoInsightsResponse', "executive_summary" | "top_opportunities" | "critical_insights" | "persona_analysis" | "competitive_considerations" | "immediate_actions" | "strategic_recommendations">;
    
    BatchEvaluationResult: ClassViewer<'BatchEvaluationResult', "evaluations" | "overall_summary" | "top_priorities">;
    
    Category: ClassViewer<'Category', "id" | "label" | "weight">;
    
    Chapter: ClassViewer<'Chapter', "start_ms" | "end_ms" | "summary" | "title">;
    
    ContextualSuggestions: ClassViewer<'ContextualSuggestions', "decision_questions" | "assumptions" | "unknowns" | "organizations" | "roles" | "interview_questions">;
    
    DecisionQuestionAnswer: ClassViewer<'DecisionQuestionAnswer', "decision_question_id" | "strategic_insight" | "supporting_findings" | "research_question_ids" | "confidence" | "reasoning" | "recommended_actions">;
    
    DecisionQuestionItem: ClassViewer<'DecisionQuestionItem', "id" | "text" | "rationale">;
    
    DecisionQuestionOut: ClassViewer<'DecisionQuestionOut', "id" | "text" | "rationale" | "key_metrics" | "risks_if_wrong">;
    
    EvidenceAnalysisResponse: ClassViewer<'EvidenceAnalysisResponse', "evidence_results" | "research_question_answers" | "decision_question_answers" | "global_goal_summary" | "recommended_actions">;
    
    EvidenceExtraction: ClassViewer<'EvidenceExtraction', "people" | "evidence" | "facet_catalog_version">;
    
    EvidenceItem: ClassViewer<'EvidenceItem', "id" | "verbatim" | "support" | "interview_id" | "context_summary">;
    
    EvidenceLinkProposal: ClassViewer<'EvidenceLinkProposal', "evidence_id" | "rationale" | "confidence">;
    
    EvidenceLinkResult: ClassViewer<'EvidenceLinkResult', "evidence_id" | "links">;
    
    EvidenceParticipant: ClassViewer<'EvidenceParticipant', "person_key" | "display_name" | "inferred_name" | "role" | "personas" | "segments" | "organization" | "summary" | "notes" | "facets" | "scales">;
    
    EvidenceQuestionLink: ClassViewer<'EvidenceQuestionLink', "question_id" | "question_kind" | "decision_question_id" | "relationship" | "confidence" | "answer_summary" | "rationale" | "next_steps">;
    
    EvidenceSet: ClassViewer<'EvidenceSet', "facts" | "goals" | "pains" | "behaviors" | "triggers" | "success" | "quotes">;
    
    EvidenceUnit: ClassViewer<'EvidenceUnit', "person_key" | "person_role" | "topic" | "gist" | "chunk" | "verbatim" | "support" | "kind_tags" | "personas" | "segments" | "journey_stage" | "anchors" | "confidence" | "context_summary" | "independence_key" | "says" | "does" | "thinks" | "feels" | "pains" | "gains">;
    
    ExecutiveInsight: ClassViewer<'ExecutiveInsight', "title" | "insight" | "evidence" | "business_impact" | "impact_level" | "confidence_level" | "personas_affected" | "recommended_actions" | "category">;
    
    ExecutiveSummary: ClassViewer<'ExecutiveSummary', "answered_insights" | "critical_unknowns" | "completion_percentage" | "confidence" | "next_action">;
    
    ExtractedInsight: ClassBuilder<'ExtractedInsight', "name" | "pain" | "details" | "evidence" | "desiredOutcome" | "assumptionAlignment" | "researchQuestionAnswered" | "evidenceStrength" | "productImplication" | "followUpQuestions" | "emotionalResponse" | "underlyingMotivation" | "values" | "category" | "journeyStage" | "jtbd" | "contradictions" | "relatedTags">;
    
    FacetCandidatePayload: ClassViewer<'FacetCandidatePayload', "kind_slug" | "label" | "synonyms" | "notes">;
    
    FacetCatalog: ClassViewer<'FacetCatalog', "kinds" | "facets" | "version">;
    
    FacetCatalogEntry: ClassViewer<'FacetCatalogEntry', "facet_ref" | "kind_slug" | "label" | "alias" | "synonyms">;
    
    FacetCatalogKind: ClassViewer<'FacetCatalogKind', "slug" | "label">;
    
    FollowUpQuestion: ClassViewer<'FollowUpQuestion', "id" | "text" | "rationale" | "estimatedMinutes" | "categoryId" | "scores">;
    
    FollowUpQuestionScores: ClassViewer<'FollowUpQuestionScores', "importance" | "goalMatch" | "novelty">;
    
    FollowUpSet: ClassViewer<'FollowUpSet', "originalQuestion" | "followUps">;
    
    GapAnalysis: ClassViewer<'GapAnalysis', "unanswered_questions" | "partially_answered_questions" | "follow_up_recommendations" | "suggested_interview_topics">;
    
    GenerateInputs: ClassViewer<'GenerateInputs', "target_org" | "target_roles" | "research_goal" | "research_goal_details" | "assumptions" | "unknowns" | "custom_instructions" | "session_id" | "round" | "total_per_round" | "per_category_min" | "per_category_max" | "interview_time_limit">;
    
    HistoryItem: ClassViewer<'HistoryItem', "questionId" | "action" | "ts" | "interviewId">;
    
    InsightMatch: ClassViewer<'InsightMatch', "question" | "insights_found" | "confidence" | "answer_summary" | "evidence">;
    
    InterviewDoc: ClassViewer<'InterviewDoc', "source" | "snippets">;
    
    InterviewExtraction: ClassViewer<'InterviewExtraction', "metadata" | "interviewee" | "insights" | "relevantAnswers" | "observationsAndNotes" | "highImpactThemes" | "openQuestionsAndNextSteps">;
    
    InterviewMetadata: ClassViewer<'InterviewMetadata', "title" | "date" | "interviewer" | "durationMin">;
    
    InterviewPromptItem: ClassViewer<'InterviewPromptItem', "id" | "text" | "research_question_id">;
    
    InterviewPromptOut: ClassViewer<'InterviewPromptOut', "id" | "rq_ids" | "text" | "followups" | "bias_checks">;
    
    Interviewee: ClassViewer<'Interviewee', "name" | "persona" | "participantDescription" | "segment" | "contactInfo">;
    
    KindTags: ClassViewer<'KindTags', "problem" | "goal" | "behavior" | "emotion" | "context" | "artifact">;
    
    NoteSnippet: ClassViewer<'NoteSnippet', "tag" | "text" | "speaker" | "timestamp">;
    
    OpportunityRecommendation: ClassViewer<'OpportunityRecommendation', "title" | "description" | "revenue_potential" | "effort_estimate" | "target_personas" | "supporting_insights" | "competitive_advantage" | "recommended_actions">;
    
    PersonFacetObservation: ClassViewer<'PersonFacetObservation', "facet_ref" | "candidate" | "kind_slug" | "value" | "source" | "evidence_unit_index" | "confidence" | "notes">;
    
    PersonScaleObservation: ClassViewer<'PersonScaleObservation', "kind_slug" | "score" | "band" | "source" | "evidence_unit_index" | "confidence" | "rationale">;
    
    Persona: ClassViewer<'Persona', "name" | "name_and_tagline" | "description" | "role_context" | "age" | "gender" | "location" | "education" | "occupation" | "income" | "languages" | "segment" | "role" | "color_hex" | "image_url" | "percentage" | "goals" | "primary_goal" | "secondary_goals" | "motivations" | "values" | "success_definition" | "behaviors_habits" | "key_tasks" | "tools_used" | "frequency_of_purchase" | "frequency_of_use" | "triggers_decision_drivers" | "pain_points" | "frustrations" | "preferences" | "learning_style" | "tech_comfort_level" | "key_quotes" | "sources" | "differentiators" | "confidence" | "evidence_count" | "hypothesis_notes" | "key_open_questions">;
    
    Persona1: ClassViewer<'Persona1', "name" | "description" | "age" | "gender" | "location" | "education" | "occupation" | "income" | "languages" | "segment" | "role" | "color_hex" | "image_url" | "motivations" | "values" | "frustrations" | "preferences" | "learning_style" | "tech_comfort_level" | "frequency_of_purchase" | "frequency_of_use" | "key_tasks" | "tools_used" | "primary_goal" | "secondary_goals" | "sources" | "quotes" | "percentage">;
    
    PersonaAnalysis: ClassViewer<'PersonaAnalysis', "persona_name" | "key_pain_points" | "unmet_needs" | "revenue_potential" | "willingness_to_pay" | "recommended_solutions" | "competitive_threats">;
    
    PersonaAssignmentDecision: ClassViewer<'PersonaAssignmentDecision', "action" | "persona_id" | "persona_name" | "confidence_score" | "reasoning" | "new_persona_data">;
    
    PersonaSet: ClassViewer<'PersonaSet', "personas" | "version" | "change_log" | "contrast_persona">;
    
    ProjectAnalysis: ClassViewer<'ProjectAnalysis', "research_goal" | "question_answers" | "gap_analysis" | "key_discoveries" | "confidence_score" | "next_steps">;
    
    ProjectNameDescription: ClassViewer<'ProjectNameDescription', "name" | "description">;
    
    ProjectTemplateOut: ClassViewer<'ProjectTemplateOut', "template_key" | "target_orgs" | "target_roles" | "research_goal" | "research_goal_details" | "decision_questions" | "assumptions" | "unknowns" | "custom_instructions">;
    
    Question: ClassViewer<'Question', "id" | "text" | "categoryId" | "rationale" | "tags" | "scores" | "estimatedMinutes" | "status" | "source" | "displayOrder" | "externalRef">;
    
    QuestionAnalysisSummary: ClassViewer<'QuestionAnalysisSummary', "question_id" | "question_kind" | "decision_question_id" | "confidence" | "summary" | "goal_achievement_summary" | "next_steps">;
    
    QuestionContext: ClassViewer<'QuestionContext', "id" | "kind" | "decision_question_id" | "text" | "rationale">;
    
    QuestionEvaluation: ClassViewer<'QuestionEvaluation', "overall_quality" | "score" | "strengths" | "issues" | "improvement" | "recommendation" | "quick_feedback">;
    
    QuestionImprovement: ClassViewer<'QuestionImprovement', "original_question" | "suggested_rewrite" | "explanation">;
    
    QuestionIssue: ClassViewer<'QuestionIssue', "type" | "description" | "severity">;
    
    QuestionPolicy: ClassViewer<'QuestionPolicy', "totalPerRound" | "perCategoryMin" | "perCategoryMax" | "dedupeWindowRounds" | "balanceBy">;
    
    QuestionSet: ClassViewer<'QuestionSet', "sessionId" | "policy" | "categories" | "questions" | "history" | "round">;
    
    ResearchGoal: ClassViewer<'ResearchGoal', "goal" | "icp" | "role" | "questions">;
    
    ResearchPlanOut: ClassViewer<'ResearchPlanOut', "goal" | "decision_questions" | "research_questions" | "interview_prompts" | "other_data_sources">;
    
    ResearchQuestion: ClassViewer<'ResearchQuestion', "question" | "priority">;
    
    ResearchQuestionAnswer: ClassViewer<'ResearchQuestionAnswer', "research_question_id" | "findings" | "evidence_ids" | "confidence" | "reasoning">;
    
    ResearchQuestionItem: ClassViewer<'ResearchQuestionItem', "id" | "text" | "rationale" | "decision_question_id">;
    
    ResearchQuestionOut: ClassViewer<'ResearchQuestionOut', "id" | "dq_id" | "text" | "rationale" | "evidence_types" | "suggested_methods">;
    
    ResearchQuestionSuggestions: ClassViewer<'ResearchQuestionSuggestions', "core_questions" | "behavioral_questions" | "pain_point_questions" | "solution_questions" | "context_questions">;
    
    ResearchStructure: ClassViewer<'ResearchStructure', "decision_questions" | "research_questions" | "interview_prompts">;
    
    Scores: ClassViewer<'Scores', "goalMatch" | "novelty" | "importance" | "uncertainty">;
    
    Set: ClassViewer<'Set', "name" | "description" | "members">;
    
    SetRecord: ClassViewer<'SetRecord', "term" | "definition">;
    
    Source: ClassViewer<'Source'>;
    
    Spectrum: ClassViewer<'Spectrum', "axis" | "rationale" | "supporting_evidence" | "alternatives">;
    
    SuggestedQuestion: ClassViewer<'SuggestedQuestion', "question" | "rationale" | "interview_type" | "priority">;
    
    ThemeCandidate: ClassViewer<'ThemeCandidate', "name" | "statement" | "inclusion_criteria" | "exclusion_criteria" | "synonyms" | "anti_examples" | "links">;
    
    
    BBValues: EnumViewer<'BBValues', "Accountability" | "Achievement" | "Adaptability" | "Adventure" | "Altruism" | "Ambition" | "Authenticity" | "Balance" | "Beauty" | "Being_the_best" | "Belonging" | "Career" | "Caring" | "Collaboration" | "Commitment" | "Community" | "Compassion" | "Competence" | "Confidence" | "Connection" | "Contentment" | "Contribution" | "Cooperation" | "Courage" | "Creativity" | "Curiosity" | "Dignity" | "Diversity" | "Environment" | "Efficiency" | "Equality" | "Ethics" | "Excellence" | "Fairness" | "Faith" | "Family" | "Financial_stability" | "Forgiveness" | "Freedom" | "Friendship" | "Fun" | "Future_generations" | "Generosity" | "Giving_back" | "Grace" | "Gratitude" | "Growth" | "Harmony" | "Health" | "Home" | "Honesty" | "Hope" | "Humility" | "Humor" | "Inclusion" | "Independence" | "Initiative" | "Integrity" | "Intuition" | "Job_security" | "Joy" | "Justice" | "Kindness" | "Knowledge" | "Leadership" | "Learning" | "Legacy" | "Leisure" | "Love" | "Loyalty" | "Making_a_difference" | "Nature" | "Openness" | "Optimism" | "Order" | "Parenting" | "Patience" | "Patriotism" | "Peace" | "Perseverance" | "Personal_fulfillment" | "Power" | "Pride" | "Recognition" | "Reliability" | "Resourcefulness" | "Respect" | "Responsibility" | "Risk_taking" | "Safety" | "Security" | "Self_discipline" | "Self_expression" | "Self_respect" | "Serenity" | "Service" | "Simplicity" | "Spirituality" | "Sportsmanship" | "Stewardship" | "Success" | "Teamwork" | "Thrift" | "Time" | "Tradition" | "Travel" | "Trust" | "Truth" | "Understanding" | "Uniqueness" | "Usefulness" | "Vision" | "Vulnerability" | "Wealth" | "Well_being" | "Wholeheartedness" | "Wisdom">;
    
    Emotions: EnumViewer<'Emotions', "Abandoned" | "Accepted" | "Aggressive" | "Amazed" | "Angry" | "Annoyed" | "Anxious" | "Apathetic" | "Appalled" | "Aroused" | "Ashamed" | "Astonished" | "Awe" | "Awful" | "Bad" | "Betrayed" | "Bitter" | "Bored" | "Busy" | "Cheeky" | "Confident" | "Confused" | "Content" | "Courageous" | "Creative" | "Critical" | "Curious" | "Depressed" | "Despair" | "Detestable" | "Disappointed" | "Disapproving" | "Disgusted" | "Disillusioned" | "Dismayed" | "Dismissive" | "Disrespected" | "Distant" | "Eager" | "Embarrassed" | "Empty" | "Energetic" | "Excited" | "Excluded" | "Exposed" | "Fearful" | "Fragile" | "Free" | "Frightened" | "Frustrated" | "Furious" | "Grief" | "Guilty" | "Happy" | "Helpless" | "Hesitant" | "Hopeful" | "Horrified" | "Hostile" | "Humiliated" | "Hurt" | "Inadequate" | "Indifferent" | "Indignant" | "Inferior" | "Infuriated" | "Inquisitive" | "Insecure" | "Insignificant" | "Inspired" | "Interested" | "Intimate" | "Isolated" | "Jealous" | "Joyful" | "Judgmental" | "Let_down" | "Lonely" | "Loving" | "Mad" | "Nauseated" | "Nervous" | "Numb" | "Optimistic" | "Out_of_control" | "Overwhelmed" | "Peaceful" | "Perplexed" | "Persecuted" | "Playful" | "Powerful" | "Powerless" | "Pressured" | "Proud" | "Provoked" | "Rejected" | "Remorseful" | "Repelled" | "Resentful" | "Respected" | "Revolted" | "Ridiculed" | "Rushed" | "Sad" | "Scared" | "Sensitive" | "Shocked" | "Skeptical" | "Sleepy" | "Startled" | "Stressed" | "Successful" | "Surprised" | "Thankful" | "Threatened" | "Tired" | "Trusting" | "Unfocussed" | "Valued" | "Victimized" | "Violated" | "Vulnerable" | "Weak" | "Withdrawn" | "Worried" | "Worthless">;
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "ActionButton","Anchor","AutoGroupThemesResponse","AutoInsightsResponse","BatchEvaluationResult","Category","Chapter","ContextualSuggestions","DecisionQuestionAnswer","DecisionQuestionItem","DecisionQuestionOut","EvidenceAnalysisResponse","EvidenceExtraction","EvidenceItem","EvidenceLinkProposal","EvidenceLinkResult","EvidenceParticipant","EvidenceQuestionLink","EvidenceSet","EvidenceUnit","ExecutiveInsight","ExecutiveSummary","ExtractedInsight","FacetCandidatePayload","FacetCatalog","FacetCatalogEntry","FacetCatalogKind","FollowUpQuestion","FollowUpQuestionScores","FollowUpSet","GapAnalysis","GenerateInputs","HistoryItem","InsightMatch","InterviewDoc","InterviewExtraction","InterviewMetadata","InterviewPromptItem","InterviewPromptOut","Interviewee","KindTags","NoteSnippet","OpportunityRecommendation","PersonFacetObservation","PersonScaleObservation","Persona","Persona1","PersonaAnalysis","PersonaAssignmentDecision","PersonaSet","ProjectAnalysis","ProjectNameDescription","ProjectTemplateOut","Question","QuestionAnalysisSummary","QuestionContext","QuestionEvaluation","QuestionImprovement","QuestionIssue","QuestionPolicy","QuestionSet","ResearchGoal","ResearchPlanOut","ResearchQuestion","ResearchQuestionAnswer","ResearchQuestionItem","ResearchQuestionOut","ResearchQuestionSuggestions","ResearchStructure","Scores","Set","SetRecord","Source","Spectrum","SuggestedQuestion","ThemeCandidate",
          ]),
          enums: new Set([
            "BBValues","Emotions",
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.ActionButton = this.tb.classViewer("ActionButton", [
          "label","action_type","parameters","priority",
        ]);
        
        this.Anchor = this.tb.classViewer("Anchor", [
          "type","target","start","end","speaker","chapter_title",
        ]);
        
        this.AutoGroupThemesResponse = this.tb.classViewer("AutoGroupThemesResponse", [
          "themes",
        ]);
        
        this.AutoInsightsResponse = this.tb.classViewer("AutoInsightsResponse", [
          "executive_summary","top_opportunities","critical_insights","persona_analysis","competitive_considerations","immediate_actions","strategic_recommendations",
        ]);
        
        this.BatchEvaluationResult = this.tb.classViewer("BatchEvaluationResult", [
          "evaluations","overall_summary","top_priorities",
        ]);
        
        this.Category = this.tb.classViewer("Category", [
          "id","label","weight",
        ]);
        
        this.Chapter = this.tb.classViewer("Chapter", [
          "start_ms","end_ms","summary","title",
        ]);
        
        this.ContextualSuggestions = this.tb.classViewer("ContextualSuggestions", [
          "decision_questions","assumptions","unknowns","organizations","roles","interview_questions",
        ]);
        
        this.DecisionQuestionAnswer = this.tb.classViewer("DecisionQuestionAnswer", [
          "decision_question_id","strategic_insight","supporting_findings","research_question_ids","confidence","reasoning","recommended_actions",
        ]);
        
        this.DecisionQuestionItem = this.tb.classViewer("DecisionQuestionItem", [
          "id","text","rationale",
        ]);
        
        this.DecisionQuestionOut = this.tb.classViewer("DecisionQuestionOut", [
          "id","text","rationale","key_metrics","risks_if_wrong",
        ]);
        
        this.EvidenceAnalysisResponse = this.tb.classViewer("EvidenceAnalysisResponse", [
          "evidence_results","research_question_answers","decision_question_answers","global_goal_summary","recommended_actions",
        ]);
        
        this.EvidenceExtraction = this.tb.classViewer("EvidenceExtraction", [
          "people","evidence","facet_catalog_version",
        ]);
        
        this.EvidenceItem = this.tb.classViewer("EvidenceItem", [
          "id","verbatim","support","interview_id","context_summary",
        ]);
        
        this.EvidenceLinkProposal = this.tb.classViewer("EvidenceLinkProposal", [
          "evidence_id","rationale","confidence",
        ]);
        
        this.EvidenceLinkResult = this.tb.classViewer("EvidenceLinkResult", [
          "evidence_id","links",
        ]);
        
        this.EvidenceParticipant = this.tb.classViewer("EvidenceParticipant", [
          "person_key","display_name","inferred_name","role","personas","segments","organization","summary","notes","facets","scales",
        ]);
        
        this.EvidenceQuestionLink = this.tb.classViewer("EvidenceQuestionLink", [
          "question_id","question_kind","decision_question_id","relationship","confidence","answer_summary","rationale","next_steps",
        ]);
        
        this.EvidenceSet = this.tb.classViewer("EvidenceSet", [
          "facts","goals","pains","behaviors","triggers","success","quotes",
        ]);
        
        this.EvidenceUnit = this.tb.classViewer("EvidenceUnit", [
          "person_key","person_role","topic","gist","chunk","verbatim","support","kind_tags","personas","segments","journey_stage","anchors","confidence","context_summary","independence_key","says","does","thinks","feels","pains","gains",
        ]);
        
        this.ExecutiveInsight = this.tb.classViewer("ExecutiveInsight", [
          "title","insight","evidence","business_impact","impact_level","confidence_level","personas_affected","recommended_actions","category",
        ]);
        
        this.ExecutiveSummary = this.tb.classViewer("ExecutiveSummary", [
          "answered_insights","critical_unknowns","completion_percentage","confidence","next_action",
        ]);
        
        this.ExtractedInsight = this.tb.classBuilder("ExtractedInsight", [
          "name","pain","details","evidence","desiredOutcome","assumptionAlignment","researchQuestionAnswered","evidenceStrength","productImplication","followUpQuestions","emotionalResponse","underlyingMotivation","values","category","journeyStage","jtbd","contradictions","relatedTags",
        ]);
        
        this.FacetCandidatePayload = this.tb.classViewer("FacetCandidatePayload", [
          "kind_slug","label","synonyms","notes",
        ]);
        
        this.FacetCatalog = this.tb.classViewer("FacetCatalog", [
          "kinds","facets","version",
        ]);
        
        this.FacetCatalogEntry = this.tb.classViewer("FacetCatalogEntry", [
          "facet_ref","kind_slug","label","alias","synonyms",
        ]);
        
        this.FacetCatalogKind = this.tb.classViewer("FacetCatalogKind", [
          "slug","label",
        ]);
        
        this.FollowUpQuestion = this.tb.classViewer("FollowUpQuestion", [
          "id","text","rationale","estimatedMinutes","categoryId","scores",
        ]);
        
        this.FollowUpQuestionScores = this.tb.classViewer("FollowUpQuestionScores", [
          "importance","goalMatch","novelty",
        ]);
        
        this.FollowUpSet = this.tb.classViewer("FollowUpSet", [
          "originalQuestion","followUps",
        ]);
        
        this.GapAnalysis = this.tb.classViewer("GapAnalysis", [
          "unanswered_questions","partially_answered_questions","follow_up_recommendations","suggested_interview_topics",
        ]);
        
        this.GenerateInputs = this.tb.classViewer("GenerateInputs", [
          "target_org","target_roles","research_goal","research_goal_details","assumptions","unknowns","custom_instructions","session_id","round","total_per_round","per_category_min","per_category_max","interview_time_limit",
        ]);
        
        this.HistoryItem = this.tb.classViewer("HistoryItem", [
          "questionId","action","ts","interviewId",
        ]);
        
        this.InsightMatch = this.tb.classViewer("InsightMatch", [
          "question","insights_found","confidence","answer_summary","evidence",
        ]);
        
        this.InterviewDoc = this.tb.classViewer("InterviewDoc", [
          "source","snippets",
        ]);
        
        this.InterviewExtraction = this.tb.classViewer("InterviewExtraction", [
          "metadata","interviewee","insights","relevantAnswers","observationsAndNotes","highImpactThemes","openQuestionsAndNextSteps",
        ]);
        
        this.InterviewMetadata = this.tb.classViewer("InterviewMetadata", [
          "title","date","interviewer","durationMin",
        ]);
        
        this.InterviewPromptItem = this.tb.classViewer("InterviewPromptItem", [
          "id","text","research_question_id",
        ]);
        
        this.InterviewPromptOut = this.tb.classViewer("InterviewPromptOut", [
          "id","rq_ids","text","followups","bias_checks",
        ]);
        
        this.Interviewee = this.tb.classViewer("Interviewee", [
          "name","persona","participantDescription","segment","contactInfo",
        ]);
        
        this.KindTags = this.tb.classViewer("KindTags", [
          "problem","goal","behavior","emotion","context","artifact",
        ]);
        
        this.NoteSnippet = this.tb.classViewer("NoteSnippet", [
          "tag","text","speaker","timestamp",
        ]);
        
        this.OpportunityRecommendation = this.tb.classViewer("OpportunityRecommendation", [
          "title","description","revenue_potential","effort_estimate","target_personas","supporting_insights","competitive_advantage","recommended_actions",
        ]);
        
        this.PersonFacetObservation = this.tb.classViewer("PersonFacetObservation", [
          "facet_ref","candidate","kind_slug","value","source","evidence_unit_index","confidence","notes",
        ]);
        
        this.PersonScaleObservation = this.tb.classViewer("PersonScaleObservation", [
          "kind_slug","score","band","source","evidence_unit_index","confidence","rationale",
        ]);
        
        this.Persona = this.tb.classViewer("Persona", [
          "name","name_and_tagline","description","role_context","age","gender","location","education","occupation","income","languages","segment","role","color_hex","image_url","percentage","goals","primary_goal","secondary_goals","motivations","values","success_definition","behaviors_habits","key_tasks","tools_used","frequency_of_purchase","frequency_of_use","triggers_decision_drivers","pain_points","frustrations","preferences","learning_style","tech_comfort_level","key_quotes","sources","differentiators","confidence","evidence_count","hypothesis_notes","key_open_questions",
        ]);
        
        this.Persona1 = this.tb.classViewer("Persona1", [
          "name","description","age","gender","location","education","occupation","income","languages","segment","role","color_hex","image_url","motivations","values","frustrations","preferences","learning_style","tech_comfort_level","frequency_of_purchase","frequency_of_use","key_tasks","tools_used","primary_goal","secondary_goals","sources","quotes","percentage",
        ]);
        
        this.PersonaAnalysis = this.tb.classViewer("PersonaAnalysis", [
          "persona_name","key_pain_points","unmet_needs","revenue_potential","willingness_to_pay","recommended_solutions","competitive_threats",
        ]);
        
        this.PersonaAssignmentDecision = this.tb.classViewer("PersonaAssignmentDecision", [
          "action","persona_id","persona_name","confidence_score","reasoning","new_persona_data",
        ]);
        
        this.PersonaSet = this.tb.classViewer("PersonaSet", [
          "personas","version","change_log","contrast_persona",
        ]);
        
        this.ProjectAnalysis = this.tb.classViewer("ProjectAnalysis", [
          "research_goal","question_answers","gap_analysis","key_discoveries","confidence_score","next_steps",
        ]);
        
        this.ProjectNameDescription = this.tb.classViewer("ProjectNameDescription", [
          "name","description",
        ]);
        
        this.ProjectTemplateOut = this.tb.classViewer("ProjectTemplateOut", [
          "template_key","target_orgs","target_roles","research_goal","research_goal_details","decision_questions","assumptions","unknowns","custom_instructions",
        ]);
        
        this.Question = this.tb.classViewer("Question", [
          "id","text","categoryId","rationale","tags","scores","estimatedMinutes","status","source","displayOrder","externalRef",
        ]);
        
        this.QuestionAnalysisSummary = this.tb.classViewer("QuestionAnalysisSummary", [
          "question_id","question_kind","decision_question_id","confidence","summary","goal_achievement_summary","next_steps",
        ]);
        
        this.QuestionContext = this.tb.classViewer("QuestionContext", [
          "id","kind","decision_question_id","text","rationale",
        ]);
        
        this.QuestionEvaluation = this.tb.classViewer("QuestionEvaluation", [
          "overall_quality","score","strengths","issues","improvement","recommendation","quick_feedback",
        ]);
        
        this.QuestionImprovement = this.tb.classViewer("QuestionImprovement", [
          "original_question","suggested_rewrite","explanation",
        ]);
        
        this.QuestionIssue = this.tb.classViewer("QuestionIssue", [
          "type","description","severity",
        ]);
        
        this.QuestionPolicy = this.tb.classViewer("QuestionPolicy", [
          "totalPerRound","perCategoryMin","perCategoryMax","dedupeWindowRounds","balanceBy",
        ]);
        
        this.QuestionSet = this.tb.classViewer("QuestionSet", [
          "sessionId","policy","categories","questions","history","round",
        ]);
        
        this.ResearchGoal = this.tb.classViewer("ResearchGoal", [
          "goal","icp","role","questions",
        ]);
        
        this.ResearchPlanOut = this.tb.classViewer("ResearchPlanOut", [
          "goal","decision_questions","research_questions","interview_prompts","other_data_sources",
        ]);
        
        this.ResearchQuestion = this.tb.classViewer("ResearchQuestion", [
          "question","priority",
        ]);
        
        this.ResearchQuestionAnswer = this.tb.classViewer("ResearchQuestionAnswer", [
          "research_question_id","findings","evidence_ids","confidence","reasoning",
        ]);
        
        this.ResearchQuestionItem = this.tb.classViewer("ResearchQuestionItem", [
          "id","text","rationale","decision_question_id",
        ]);
        
        this.ResearchQuestionOut = this.tb.classViewer("ResearchQuestionOut", [
          "id","dq_id","text","rationale","evidence_types","suggested_methods",
        ]);
        
        this.ResearchQuestionSuggestions = this.tb.classViewer("ResearchQuestionSuggestions", [
          "core_questions","behavioral_questions","pain_point_questions","solution_questions","context_questions",
        ]);
        
        this.ResearchStructure = this.tb.classViewer("ResearchStructure", [
          "decision_questions","research_questions","interview_prompts",
        ]);
        
        this.Scores = this.tb.classViewer("Scores", [
          "goalMatch","novelty","importance","uncertainty",
        ]);
        
        this.Set = this.tb.classViewer("Set", [
          "name","description","members",
        ]);
        
        this.SetRecord = this.tb.classViewer("SetRecord", [
          "term","definition",
        ]);
        
        this.Source = this.tb.classViewer("Source", [
          
        ]);
        
        this.Spectrum = this.tb.classViewer("Spectrum", [
          "axis","rationale","supporting_evidence","alternatives",
        ]);
        
        this.SuggestedQuestion = this.tb.classViewer("SuggestedQuestion", [
          "question","rationale","interview_type","priority",
        ]);
        
        this.ThemeCandidate = this.tb.classViewer("ThemeCandidate", [
          "name","statement","inclusion_criteria","exclusion_criteria","synonyms","anti_examples","links",
        ]);
        
        
        this.BBValues = this.tb.enumViewer("BBValues", [
          "Accountability","Achievement","Adaptability","Adventure","Altruism","Ambition","Authenticity","Balance","Beauty","Being_the_best","Belonging","Career","Caring","Collaboration","Commitment","Community","Compassion","Competence","Confidence","Connection","Contentment","Contribution","Cooperation","Courage","Creativity","Curiosity","Dignity","Diversity","Environment","Efficiency","Equality","Ethics","Excellence","Fairness","Faith","Family","Financial_stability","Forgiveness","Freedom","Friendship","Fun","Future_generations","Generosity","Giving_back","Grace","Gratitude","Growth","Harmony","Health","Home","Honesty","Hope","Humility","Humor","Inclusion","Independence","Initiative","Integrity","Intuition","Job_security","Joy","Justice","Kindness","Knowledge","Leadership","Learning","Legacy","Leisure","Love","Loyalty","Making_a_difference","Nature","Openness","Optimism","Order","Parenting","Patience","Patriotism","Peace","Perseverance","Personal_fulfillment","Power","Pride","Recognition","Reliability","Resourcefulness","Respect","Responsibility","Risk_taking","Safety","Security","Self_discipline","Self_expression","Self_respect","Serenity","Service","Simplicity","Spirituality","Sportsmanship","Stewardship","Success","Teamwork","Thrift","Time","Tradition","Travel","Trust","Truth","Understanding","Uniqueness","Usefulness","Vision","Vulnerability","Wealth","Well_being","Wholeheartedness","Wisdom",
        ]);
        
        this.Emotions = this.tb.enumViewer("Emotions", [
          "Abandoned","Accepted","Aggressive","Amazed","Angry","Annoyed","Anxious","Apathetic","Appalled","Aroused","Ashamed","Astonished","Awe","Awful","Bad","Betrayed","Bitter","Bored","Busy","Cheeky","Confident","Confused","Content","Courageous","Creative","Critical","Curious","Depressed","Despair","Detestable","Disappointed","Disapproving","Disgusted","Disillusioned","Dismayed","Dismissive","Disrespected","Distant","Eager","Embarrassed","Empty","Energetic","Excited","Excluded","Exposed","Fearful","Fragile","Free","Frightened","Frustrated","Furious","Grief","Guilty","Happy","Helpless","Hesitant","Hopeful","Horrified","Hostile","Humiliated","Hurt","Inadequate","Indifferent","Indignant","Inferior","Infuriated","Inquisitive","Insecure","Insignificant","Inspired","Interested","Intimate","Isolated","Jealous","Joyful","Judgmental","Let_down","Lonely","Loving","Mad","Nauseated","Nervous","Numb","Optimistic","Out_of_control","Overwhelmed","Peaceful","Perplexed","Persecuted","Playful","Powerful","Powerless","Pressured","Proud","Provoked","Rejected","Remorseful","Repelled","Resentful","Respected","Revolted","Ridiculed","Rushed","Sad","Scared","Sensitive","Shocked","Skeptical","Sleepy","Startled","Stressed","Successful","Surprised","Thankful","Threatened","Tired","Trusting","Unfocussed","Valued","Victimized","Violated","Vulnerable","Weak","Withdrawn","Worried","Worthless",
        ]);
        
    }

    reset(): void {
        this.tb.reset();
        // TODO: This should happen in Rust. Problem is, when we construct the
        // typebuilder we instantiate class builders once and it seems to make
        // a JS copy, bypassing the Rust side? In Python however, every time we
        // access a class builder with @property, we get a new instance that
        // wraps over the Rust type builder, so we only need to call tb.reset().
        // In JS it's not possible unless we refactor the way class builders are
        // accessed.
         this.ExtractedInsight.reset(); 
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}