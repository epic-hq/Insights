/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlCtxManager, BamlRuntime, ClientRegistry, } from "@boundaryml/baml"
import { toBamlError } from "@boundaryml/baml"
import type { partial_types } from "./partial_types"
import type TypeBuilder from "./type_builder"
import type * as types from "./types"

export class LlmResponseParser {
	constructor(
		private runtime: BamlRuntime,
		private ctxManager: BamlCtxManager
	) {}

	AnalyzeProjectInsights(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.ProjectAnalysis {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"AnalyzeProjectInsights",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.ProjectAnalysis
		} catch (error) {
			throw toBamlError(error)
		}
	}

	AssignPersonaToInterview(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.PersonaAssignmentDecision {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"AssignPersonaToInterview",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.PersonaAssignmentDecision
		} catch (error) {
			throw toBamlError(error)
		}
	}

	AutoGroupThemes(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.AutoGroupThemesResponse {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"AutoGroupThemes",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.AutoGroupThemesResponse
		} catch (error) {
			throw toBamlError(error)
		}
	}

	CreateSet(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.Set {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"CreateSet",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.Set
		} catch (error) {
			throw toBamlError(error)
		}
	}

	DraftContrastPersona(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.Persona {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"DraftContrastPersona",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.Persona
		} catch (error) {
			throw toBamlError(error)
		}
	}

	DraftProvisionalPersona(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.Persona {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"DraftProvisionalPersona",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.Persona
		} catch (error) {
			throw toBamlError(error)
		}
	}

	ExtractEvidence(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.EvidenceSet {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"ExtractEvidence",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.EvidenceSet
		} catch (error) {
			throw toBamlError(error)
		}
	}

	ExtractEvidenceFromTranscript(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.EvidenceUnit[] {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"ExtractEvidenceFromTranscript",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.EvidenceUnit[]
		} catch (error) {
			throw toBamlError(error)
		}
	}

	ExtractInsights(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.InterviewExtraction {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"ExtractInsights",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.InterviewExtraction
		} catch (error) {
			throw toBamlError(error)
		}
	}

	ExtractPersona(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.Persona {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"ExtractPersona",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.Persona
		} catch (error) {
			throw toBamlError(error)
		}
	}

	FindSpectrum(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.Spectrum {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"FindSpectrum",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.Spectrum
		} catch (error) {
			throw toBamlError(error)
		}
	}

	GenerateAutoInsights(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.AutoInsightsResponse {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"GenerateAutoInsights",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.AutoInsightsResponse
		} catch (error) {
			throw toBamlError(error)
		}
	}

	GenerateExecutiveSummary(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.ExecutiveSummary {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"GenerateExecutiveSummary",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.ExecutiveSummary
		} catch (error) {
			throw toBamlError(error)
		}
	}

	GeneratePersonas(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.Persona[] {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"GeneratePersonas",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.Persona[]
		} catch (error) {
			throw toBamlError(error)
		}
	}

	GenerateResearchQuestions(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.ResearchQuestionSuggestions {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"GenerateResearchQuestions",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.ResearchQuestionSuggestions
		} catch (error) {
			throw toBamlError(error)
		}
	}

	NormalizeNotes(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.InterviewDoc {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"NormalizeNotes",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.InterviewDoc
		} catch (error) {
			throw toBamlError(error)
		}
	}

	RefinePersonas(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): types.PersonaSet {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"RefinePersonas",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as types.PersonaSet
		} catch (error) {
			throw toBamlError(error)
		}
	}
}

export class LlmStreamParser {
	constructor(
		private runtime: BamlRuntime,
		private ctxManager: BamlCtxManager
	) {}

	AnalyzeProjectInsights(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.ProjectAnalysis {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"AnalyzeProjectInsights",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.ProjectAnalysis
		} catch (error) {
			throw toBamlError(error)
		}
	}

	AssignPersonaToInterview(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.PersonaAssignmentDecision {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"AssignPersonaToInterview",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.PersonaAssignmentDecision
		} catch (error) {
			throw toBamlError(error)
		}
	}

	AutoGroupThemes(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.AutoGroupThemesResponse {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"AutoGroupThemes",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.AutoGroupThemesResponse
		} catch (error) {
			throw toBamlError(error)
		}
	}

	CreateSet(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.Set {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"CreateSet",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.Set
		} catch (error) {
			throw toBamlError(error)
		}
	}

	DraftContrastPersona(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.Persona {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"DraftContrastPersona",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.Persona
		} catch (error) {
			throw toBamlError(error)
		}
	}

	DraftProvisionalPersona(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.Persona {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"DraftProvisionalPersona",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.Persona
		} catch (error) {
			throw toBamlError(error)
		}
	}

	ExtractEvidence(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.EvidenceSet {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"ExtractEvidence",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.EvidenceSet
		} catch (error) {
			throw toBamlError(error)
		}
	}

	ExtractEvidenceFromTranscript(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.EvidenceUnit[] {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"ExtractEvidenceFromTranscript",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.EvidenceUnit[]
		} catch (error) {
			throw toBamlError(error)
		}
	}

	ExtractInsights(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.InterviewExtraction {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"ExtractInsights",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.InterviewExtraction
		} catch (error) {
			throw toBamlError(error)
		}
	}

	ExtractPersona(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.Persona {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"ExtractPersona",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.Persona
		} catch (error) {
			throw toBamlError(error)
		}
	}

	FindSpectrum(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.Spectrum {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"FindSpectrum",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.Spectrum
		} catch (error) {
			throw toBamlError(error)
		}
	}

	GenerateAutoInsights(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.AutoInsightsResponse {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"GenerateAutoInsights",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.AutoInsightsResponse
		} catch (error) {
			throw toBamlError(error)
		}
	}

	GenerateExecutiveSummary(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.ExecutiveSummary {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"GenerateExecutiveSummary",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.ExecutiveSummary
		} catch (error) {
			throw toBamlError(error)
		}
	}

	GeneratePersonas(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.Persona[] {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"GeneratePersonas",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.Persona[]
		} catch (error) {
			throw toBamlError(error)
		}
	}

	GenerateResearchQuestions(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.ResearchQuestionSuggestions {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"GenerateResearchQuestions",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.ResearchQuestionSuggestions
		} catch (error) {
			throw toBamlError(error)
		}
	}

	NormalizeNotes(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.InterviewDoc {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"NormalizeNotes",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.InterviewDoc
		} catch (error) {
			throw toBamlError(error)
		}
	}

	RefinePersonas(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry; env?: Record<string, string | undefined> }
	): partial_types.PersonaSet {
		try {
			const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env }
			const env: Record<string, string> = Object.fromEntries(
				Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
			)
			return this.runtime.parseLlmResponse(
				"RefinePersonas",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env
			) as partial_types.PersonaSet
		} catch (error) {
			throw toBamlError(error)
		}
	}
}
