# Onboarding

## UC:EarlySignUp

### User Story

As an entrepreneur, I want to:

Direct visitors from my landing page to an early access signup.

Offer an incentive (e.g., first month free).

Immediately engage them in a short, targeted chat to learn:

Their core problem & use case.

Current challenges & what’s not working.

How important solving this is.

What their ideal solution looks like.

What kind of content they want to analyze.

(Optional) Additional feedback or wish list items.

Store their responses in my database for later segmentation and product design.

### Flow

Landing Page

Headline + value prop.

CTA: “Get Early Access – 1st Month Free.”

Email signup form → creates user in DB.

Redirect to /signup-chat.

Signup Chat Page

Built with CopilotKit chat UI.

Uses a dedicated onboardingAgent with a fixed script:

Intro & thanks for signing up.

Ask Q1 → Problem & use case.

Ask Q2 → Challenges with current solutions.

Ask Q3 → Importance rating (1–5).

Ask Q4 → Ideal solution vision.

Ask Q5 → Types of content they want to analyze.

Optional wrap-up question: “Anything else you wish existed?”

End with: “Thanks! We’ll be in touch when you’re activated.”

Data Storage

Save chat transcript in account_settings.metadata (JSONB) under key signup_chat.

Example:

json
Copy
Edit
{
  "signup_chat": {
    "problem": "...",
    "challenges": "...",
    "importance": 5,
    "ideal_solution": "...",
    "content_types": "...",
    "other_feedback": "..."
  }
}

### Technical Implementation

Frontend

Framework: Remix (React Router 7).

CopilotKit integration for chat UI.

Agent config: minimal instructions, no off-topic conversation.

Redirect from landing page signup → /signup-chat.

Backend

Supabase for auth & DB.

Table: account_settings (with metadata JSONB field).

API endpoint to save chat data:

Authenticated request (user session).

Merge signup_chat key into metadata.

Agent Configuration

Reference: CopilotKit Human-in-the-Loop docs

Instruction prompt:

“You are the onboarding assistant for early access users. Ask exactly these questions in sequence. Be concise, friendly, and conversational. Save responses for analysis. Do not answer unrelated questions.”

### Success Criteria

≥50% of landing page signups complete the chat.

All chat responses saved correctly to DB.

Insights easily retrievable for segmentation before launch.

### Technical Implementation

```sql
create or replace function upsert_signup_data(
    p_user_id uuid,
    p_signup_data jsonb
) returns void as $$
begin
    update user_settings
    set signup_data = jsonb_set(
        coalesce(signup_data, '{}'::jsonb),      -- ensure metadata exists
        '{signup_data}',                      -- path to key
        p_signup_data,                        -- new value
        true                                  -- create if missing
    )
    where user_id = p_user_id;
end;
$$ language plpgsql;

grant execute on function upsert_signup_data(uuid, jsonb) to authenticated;

-- example call
select upsert_signup_data(
    user_id,
    '{
      "problem": "Hard to track client feedback",
      "challenges": "Manual spreadsheets take too long",
      "importance": 5,
      "ideal_solution": "Automated feedback dashboard",
      "content_types": "Audio transcripts",
      "other_feedback": "Integration with Notion"
    }'::jsonb
);
```

**CopilotKit Agent**

```typescript
export const onboardingAgent = new Agent({
    name: "Onboarding Assistant",
    description: "Helps new users understand the product and get started.",
    instructions: "You are the onboarding assistant for early access users. Ask exactly these questions in sequence. Be concise, friendly, and conversational. Save responses for analysis. Do not answer unrelated questions.",
    tools: [new ConsoleTool()],
    model: "gpt-4o",
    systemPrompt: "You are the onboarding assistant for early access users. Ask exactly these questions in sequence. Be concise, friendly, and conversational. Save responses for analysis. Do not answer unrelated questions.",

});
```

### User_settings

I needed to create a user_settings table to store onboarding data for each user, created on accounts.run_new_user_setup().

we should:

* Keep account_settings for now but repurpose it back to team-level over time.
Signup flow:
* copy the same default selection you currently store:
* last_used_account_id = team_account_id
* last_used_project_id = new_project_id

App changes:

* ProtectedLayout.tsx: use URL account/project as source of truth; only fall back to user_settings.last_used* for initial redirects (e.g., “/home”).

* app/features/home/pages/index.tsx: switch from account_settings.current_*to user_settings.last_used_* when computing default redirect.

* Gradually remove onboarding_completed and current_* from account_settings; use it purely for org-level config (e.g., default_project_id for new members, workspace name, billing plan, enforcement toggles).

## User Story: Lean First Project Setup

Title: Context-Driven Onboarding with Educational Processing Experience

As a new user,
I want to quickly set up my research context and upload my first interview with minimal friction,
So that I can get relevant insights while learning about the platform's capabilities during processing.

### Core Requirements:

1. **Context Collection (30 seconds):** Capture ICP, research goals, and key questions upfront
2. **Simple Upload:** Single-step file upload with clear media type selection
3. **Educational Processing:** Auto-advancing cards that teach while processing occurs
4. **Mobile-First:** Optimized for mobile devices with touch-friendly interactions
5. **Immediate Value:** Show project status with encouragement to add more interviews

### Lean Flow Steps:

**Step 1: Research Context (Frame 1-2)**
- Target market/ICP input
- Research goal selection (needs, willingness to pay, custom)
- Key questions (suggested + custom)

**Step 2: Media Upload (Frame 3)**
- Drag & drop or file picker
- Media type selection (interview, focus group, etc.)
- Immediate processing start

**Step 3: Educational Processing (Frame 4-6)**
- Real-time progress updates
- Auto-advancing educational cards:
  - How AI analysis works
  - Best practices for insights
  - Data security & privacy
- Swipeable, pauseable, mobile-optimized

**Step 4: Project Status & Next Steps (Frame 7)**
- Success confirmation with project summary
- Single interview count with upgrade encouragement
- Clear CTA for adding more interviews
- View analysis button

### Key Improvements from Previous Flow:

1. **Context First:** Capture research goals before upload, not after
2. **Lean Setup:** Reduced to 3 core steps instead of lengthy chat
3. **Mobile-Optimized:** Touch-first design with appropriate sizing
4. **Immediate Processing:** Start analysis during upload, not after completion
5. **Value-Driven Completion:** Show project status that encourages expansion

### Educational Card Content Themes:

1. **AI Analysis Process:** Visual explanation of audio → transcript → insights
2. **Best Practices:** Interview quality, length, and question types
3. **Security & Privacy:** Encryption, access controls, data retention
4. **Feature Highlights:** Dashboard navigation, sharing, collaboration
5. **Expansion Benefits:** Why 3+ interviews unlock deeper insights

### Technical Changes Required:

- Replace chat-based onboarding with structured form flow
- Implement auto-advancing card system with manual controls
- Add mobile-responsive upload interface
- Create project status page design
- Integrate real-time processing progress

### References

Future: Allow anonymous upload of interview to get insights, but require sign up to save results and share.
How to implement: [supabase docs](https://supabase.com/docs/guides/auth/auth-anonymous)
